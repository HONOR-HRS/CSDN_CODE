
#line 1 ".\DS1302.c" /0
  
#line 1 "D:\KEIL\C51\INC\REG51.H" /0






 
 
 
 sfr P0   = 0x80;
 sfr P1   = 0x90;
 sfr P2   = 0xA0;
 sfr P3   = 0xB0;
 sfr PSW  = 0xD0;
 sfr ACC  = 0xE0;
 sfr B    = 0xF0;
 sfr SP   = 0x81;
 sfr DPL  = 0x82;
 sfr DPH  = 0x83;
 sfr PCON = 0x87;
 sfr TCON = 0x88;
 sfr TMOD = 0x89;
 sfr TL0  = 0x8A;
 sfr TL1  = 0x8B;
 sfr TH0  = 0x8C;
 sfr TH1  = 0x8D;
 sfr IE   = 0xA8;
 sfr IP   = 0xB8;
 sfr SCON = 0x98;
 sfr SBUF = 0x99;
 
 
 
 
 sbit CY   = 0xD7;
 sbit AC   = 0xD6;
 sbit F0   = 0xD5;
 sbit RS1  = 0xD4;
 sbit RS0  = 0xD3;
 sbit OV   = 0xD2;
 sbit P    = 0xD0;
 
 
 sbit TF1  = 0x8F;
 sbit TR1  = 0x8E;
 sbit TF0  = 0x8D;
 sbit TR0  = 0x8C;
 sbit IE1  = 0x8B;
 sbit IT1  = 0x8A;
 sbit IE0  = 0x89;
 sbit IT0  = 0x88;
 
 
 sbit EA   = 0xAF;
 sbit ES   = 0xAC;
 sbit ET1  = 0xAB;
 sbit EX1  = 0xAA;
 sbit ET0  = 0xA9;
 sbit EX0  = 0xA8;
 
 
 sbit PS   = 0xBC;
 sbit PT1  = 0xBB;
 sbit PX1  = 0xBA;
 sbit PT0  = 0xB9;
 sbit PX0  = 0xB8;
 
 
 sbit RD   = 0xB7;
 sbit WR   = 0xB6;
 sbit T1   = 0xB5;
 sbit T0   = 0xB4;
 sbit INT1 = 0xB3;
 sbit INT0 = 0xB2;
 sbit TXD  = 0xB1;
 sbit RXD  = 0xB0;
 
 
 sbit SM0  = 0x9F;
 sbit SM1  = 0x9E;
 sbit SM2  = 0x9D;
 sbit REN  = 0x9C;
 sbit TB8  = 0x9B;
 sbit RB8  = 0x9A;
 sbit TI   = 0x99;
 sbit RI   = 0x98;
#line 1 ".\DS1302.c" /0
 
  
#line 1 "D:\KEIL\C51\INC\INTRINS.H" /0






 
 
 extern void          _nop_     (void);
 extern bit           _testbit_ (bit);
 extern unsigned char _cror_    (unsigned char, unsigned char);
 extern unsigned int  _iror_    (unsigned int,  unsigned char);
 extern unsigned long _lror_    (unsigned long, unsigned char);
 extern unsigned char _crol_    (unsigned char, unsigned char);
 extern unsigned int  _irol_    (unsigned int,  unsigned char);
 extern unsigned long _lrol_    (unsigned long, unsigned char);
 extern unsigned char _chkfloat_(float);
#line 2 ".\DS1302.c" /0
 
 
 
 
 
 sbit  DS1302_CLK = P1^7;               
 sbit  DS1302_IO  = P1^6;               
 sbit  DS1302_RST = P1^5;               
 sbit  wireless_1 = P3^0;
 sbit  wireless_2 = P3^1;
 sbit  wireless_3 = P3^2;
 sbit  wireless_4 = P3^3;
 sbit  ACC0 = ACC^0;
 sbit  ACC7 = ACC^7;
 char hide_sec,hide_min,hide_hour,hide_day,hide_week,hide_month,hide_year;   
 sbit Set = P2^0;        
 sbit Up = P2^1;         
 sbit Down = P2^2;       
 sbit out = P2^3;        
 sbit DQ = P1^0;         
 char done,count,temp,flag,up_flag,down_flag;
  unsigned char temp_value;       
  unsigned char TempBuffer[5],week_value[2];
 
 
 void show_time();    
 
 
 
 
 sbit rs		= P2^5;
 sbit rw		= P2^6;
 sbit e  	= P2^7;
 
 sbit busy=P0^7;    
 void wr_d_lcd(unsigned char content);
 void wr_i_lcd(unsigned char content);
 void clrram_lcd (void);
 void init_lcd(void);
 void busy_lcd(void);
 void rev_row_lcd(unsigned char row);
 void rev_co_lcd(unsigned char row,unsigned char col,unsigned char mode);
 void clr_lcd(void);
 void wr_co_lcd(unsigned char row,unsigned char col,unsigned char lcddata1,unsigned char lcddtta2);
 void wr_row_lcd(unsigned char row,char *p);
 
 
 void init_lcd(void)
 {
 wr_i_lcd(0x06);   
 wr_i_lcd(0x0c);   
 }
 
 
 void clrram_lcd (void)
 {
 wr_i_lcd(0x30);
 wr_i_lcd(0x01);
 }
 
 
 
 void wr_d_lcd(unsigned char content)
 {
 busy_lcd();
 rs=1;
 rw=0;
  P0=content;
 e=1;
 ;
 e=0;
 }
 
 
 
 void wr_i_lcd(unsigned char content)
 {
 busy_lcd();
 rs=0;
 rw=0;
  P0=content;
 e=1;
 ;
 e=0;
 }
 
 
 
 void busy_lcd(void)
 {
  P0=0xff;
 rs=0;
 rw=1;
 e =1;
 while(busy==1);
 e =0;
 }
 
 
 
 void wr_row_lcd(unsigned char row,char *p)
 {
  unsigned char i;
 if (row==1)wr_i_lcd(0x80);
 else if (row==2)wr_i_lcd(0x90);
 else if (row==3)wr_i_lcd(0x88);
 else wr_i_lcd(0x98);
 for(i=0;i<16;i++)wr_d_lcd(*p++);
 }
 
 
 
 
 void wr_co_lcd(unsigned char row,unsigned char col,unsigned char lcddata1,unsigned char lcddata2)
 {
  unsigned char coor;
 if (row==1)coor=0x7f+col;
 else if (row==2)coor=0x8f+col;
 else if (row==3)coor=0x87+col;
 else coor=0x97+col;
 wr_i_lcd(coor);
 wr_d_lcd(lcddata1);
 wr_d_lcd(lcddata2);
 }
 
 void GOTOXY(unsigned char y, unsigned char x)
 {
 if(y==1)
 wr_i_lcd(0x80|x);
 if(y==2)
 wr_i_lcd(0x90|x);
 if(y==3)
 wr_i_lcd((0x80|x)+8);
 if(y==4)
 wr_i_lcd((0x90|x)+8);
 }
 
 void print(unsigned char *str)
 {
 while(*str!='\0')
 {
 wr_d_lcd(*str);
 str++;
 }
 }
 
 
 
 
 
 
 
 typedef struct __SYSTEMTIME__
 {
  unsigned char Second;
  unsigned char Minute;
  unsigned char Hour;
  unsigned char Week;
  unsigned char Day;
  unsigned char Month;
  unsigned char  Year;
  unsigned char DateString[11];
  unsigned char TimeString[9];
 }SYSTEMTIME;	 
 SYSTEMTIME CurrentTime;
 
 
 
 
 
 
 
 
 
 
 
 
 void DS1302InputByte(unsigned char d) 	 
 { 
  unsigned char i;
 ACC = d;
 for(i=8; i>0; i--)
 {
 DS1302_IO = ACC0;           	 
 DS1302_CLK = 1;
 DS1302_CLK = 0;
 ACC = ACC >> 1; 
 } 
 }
 
  unsigned char DS1302OutputByte(void) 	 
 { 
  unsigned char i;
 for(i=8; i>0; i--)
 {
 ACC = ACC >>1;         			 
 ACC7 = DS1302_IO;
 DS1302_CLK = 1;
 DS1302_CLK = 0;
 } 
 return(ACC); 
 }
 
 void Write1302(unsigned char ucAddr, unsigned char ucDa)	 
 {
 DS1302_RST = 0;
 DS1302_CLK = 0;
 DS1302_RST = 1;
 DS1302InputByte(ucAddr);       	 
 DS1302InputByte(ucDa);       	 
 DS1302_CLK = 1;
 DS1302_RST = 0;
 } 
 
  unsigned char Read1302(unsigned char ucAddr)	 
 {
 unsigned char ucData;
 DS1302_RST = 0;
 DS1302_CLK = 0;
 DS1302_RST = 1;
 DS1302InputByte(ucAddr|0x01);         
 ucData = DS1302OutputByte();          
 DS1302_CLK = 1;
 DS1302_RST = 0;
 return(ucData);
 }
 
 
 
 void DS1302_GetTime(SYSTEMTIME *Time)   
 {
  unsigned char ReadValue;
 ReadValue = Read1302(0x80);
 Time->Second = ((ReadValue&0x70)>>4)*10 + (ReadValue&0x0F);
 ReadValue = Read1302(0x82);
 Time->Minute = ((ReadValue&0x70)>>4)*10 + (ReadValue&0x0F);
 ReadValue = Read1302(0x84);
 Time->Hour = ((ReadValue&0x70)>>4)*10 + (ReadValue&0x0F);
 ReadValue = Read1302(0x86);
 Time->Day = ((ReadValue&0x70)>>4)*10 + (ReadValue&0x0F);	
 ReadValue = Read1302(0x8A);
 Time->Week = ((ReadValue&0x70)>>4)*10 + (ReadValue&0x0F);
 ReadValue = Read1302(0x88);
 Time->Month = ((ReadValue&0x70)>>4)*10 + (ReadValue&0x0F);
 ReadValue = Read1302(0x8C);
 Time->Year = ((ReadValue&0x70)>>4)*10 + (ReadValue&0x0F);	
 }
 
 void DateToStr(SYSTEMTIME *Time)     
 {   
  unsigned char tab[ ]={'Ò»','¶þ','È','ËÄ','Îå','Áù','ÈÕ'};
 if(hide_year<2)                  
 {                               
 Time->DateString[0] = '2';
 Time->DateString[1] = '0';	 
 Time->DateString[2] = Time->Year/10 + '0';
 Time->DateString[3] = Time->Year%10 + '0';
 }
 else
 { 
 Time->DateString[0] = ' ';
 Time->DateString[1] = ' ';		 
 Time->DateString[2] = ' ';
 Time->DateString[3] = ' ';
 }
 Time->DateString[4] = 'Äê';
 if(hide_month<2)
 {
 Time->DateString[5] = Time->Month/10 + '0';
 Time->DateString[6] = Time->Month%10 + '0';
 }
 else
 {
 Time->DateString[5] = ' ';
 Time->DateString[6] = ' ';
 }
 Time->DateString[7] = 'ÔÂ';
 if(hide_day<2)
 {
 Time->DateString[8] = Time->Day/10 + '0';
 Time->DateString[9] = Time->Day%10 + '0';
 }
 Time->DateString[10] = 'ÈÕ';
 else
 {
 Time->DateString[8] = ' ';
 Time->DateString[9] = ' ';	    
 }
 if(hide_week<2)
 {
 week_value[0] = tab[Time->Week%10 + '0'];   
 }
 else
 {
 week_value[0] = ' ';
 }
 week_value[1] = '\0';
 
 Time->DateString[10] = '\0';  
 }
 
 void TimeToStr(SYSTEMTIME *Time)   
 {   if(hide_hour<2)
 {
 Time->TimeString[0] = Time->Hour/10 + '0';
 Time->TimeString[1] = Time->Hour%10 + '0';
 }
 else
 {
 Time->TimeString[0] = ' ';
 Time->TimeString[1] = ' ';
 }
 Time->TimeString[2] = ':';
 if(hide_min<2)
 {
 Time->TimeString[3] = Time->Minute/10 + '0';
 Time->TimeString[4] = Time->Minute%10 + '0';
 }
 else
 {
 Time->TimeString[3] = ' ';
 Time->TimeString[4] = ' ';
 }
 Time->TimeString[5] = ':';
 if(hide_sec<2)
 {
 Time->TimeString[6] = Time->Second/10 + '0';
 Time->TimeString[7] = Time->Second%10 + '0';
 }
 else
 {
 Time->TimeString[6] = ' ';
 Time->TimeString[7] = ' ';
 }
 Time->DateString[8] = '\0';
 }
 
 
 void Initial_DS1302(void)    
 {   
  unsigned char Second=Read1302(0x80);
 if(Second&0x80)	       
 {
 Write1302(0x8e,0x00);  
 Write1302(0x8c,0x07);  
 Write1302(0x88,0x07);
 Write1302(0x86,0x25);
 Write1302(0x8a,0x07);
 Write1302(0x84,0x23);
 Write1302(0x82,0x59);
 Write1302(0x80,0x55);
 Write1302(0x8e,0x80);  
 }
 
 }
 
 
 
 
 
 void delay_18B20(unsigned int i)
 {
 while(i--);
 }
 
 
 
 void Init_DS18B20(void) 
 {
  unsigned char x=0;
 DQ = 1;           
 delay_18B20(8);   
 DQ = 0;           
 delay_18B20(80);  
 DQ = 1;           
 delay_18B20(14);
 x=DQ;             
 delay_18B20(20);
 }
 
 
 
  unsigned char ReadOneChar(void)
 {
  unsigned char i=0;
  unsigned char dat = 0;
 for (i=8;i>0;i--)
 {
 DQ = 0;  
 dat>>=1;
 DQ = 1;  
 if(DQ)
 dat|=0x80;
 delay_18B20(4);
 }
 return(dat);
 }
 
 
 
 void WriteOneChar(unsigned char dat)
 {
 unsigned char i=0;
 for (i=8; i>0; i--)
 {
 DQ = 0;
 DQ = dat&0x01;
 delay_18B20(5);
 DQ = 1;
 dat>>=1;
 }
 }
 
 
 
 void ReadTemp(void)
 {
  unsigned char a=0;
  unsigned char b=0;
  unsigned char t=0;
 
 Init_DS18B20();
 WriteOneChar(0xCC);    	 
 WriteOneChar(0x44); 	 
 
 delay_18B20(100);        
 
 Init_DS18B20();
 WriteOneChar(0xCC); 	 
 WriteOneChar(0xBE); 	 
 
 delay_18B20(100);
 
 a=ReadOneChar();    	 
 b=ReadOneChar();   		 
 temp_value=b<<4;
 temp_value+=(a&0xf0)>>4;               
 }
 void temp_to_str()    
 {
 TempBuffer[0]=temp_value/10+'0';   
 TempBuffer[1]=temp_value%10+'0';   
 }
 void Delay1ms(unsigned int count)
 {
 unsigned int i,j;
 for(i=0;i<count;i++)
 for(j=0;j<120;j++);
 }
 
 
 void mdelay(unsigned int delay)
 {	unsigned int i;
 for(;delay>0;delay--)
 {for(i=0;i<62;i++)  
 {;}
 }
 }
 
 
 void outkey()                     
 { unsigned char Second;
 if(out==0||wireless_1==1)         
 { mdelay(8); 
 count=0;
 hide_sec=0,hide_min=0,hide_hour=0,hide_day=0,hide_week=0,hide_month=0,hide_year=0;
 Second=Read1302(0x80);
 Write1302(0x8e,0x00);  
 Write1302(0x80,Second&0x7f);
 Write1302(0x8E,0x80);           
 done=0;           
 while(out==0);
 while(wireless_1==1);
 }
 }
 
 void Upkey() 
 {	   
 Up=1;
 if(Up==0||wireless_2==1)
 {
 mdelay(8);
 switch(count)
 {case 1:
 temp=Read1302(0x80);   
 temp=temp+1;   
 up_flag=1;     
 if((temp&0x7f)>0x59)    
 temp=0;								  
 break;
 case 2:
 temp=Read1302(0x82);   
 temp=temp+1;   
 up_flag=1;
 if(temp>0x59)           
 temp=0;
 break;
 case 3:
 temp=Read1302(0x84);   
 temp=temp+1;   
 up_flag=1;
 if(temp>0x23)    
 temp=0;
 break;
 case 4:
 temp=Read1302(0x8A);   
 temp=temp+1;   
 up_flag=1;
 if(temp>0x7)  
 temp=1;
 break;
 case 5:
 temp=Read1302(0x86);   
 temp=temp+1;   
 up_flag=1;
 if(temp>0x31)
 temp=1;
 break;
 case 6:
 temp=Read1302(0x88);   
 temp=temp+1;   
 up_flag=1;
 if(temp>0x12)
 temp=1;
 break;
 case 7:
 temp=Read1302(0x8C);   
 temp=temp+1;   
 up_flag=1;
 if(temp>0x85)
 temp=0;
 break;
 default:break;
 }
 
 while(Up==0);
 while(wireless_2==1);
 }
 }
 
 
 void Downkey() 
 {	    
 Down=1;
 if(Down==0||wireless_3==1)
 {
 mdelay(8);
 switch(count)
 {case 1:
 temp=Read1302(0x80);   
 temp=temp-1;						     
 down_flag=1;        
 if(temp==0x7f)      
 temp=0x59;
 break;
 case 2:
 temp=Read1302(0x82);   
 temp=temp-1;   
 down_flag=1;
 if(temp==-1)
 temp=0x59;       
 break;
 case 3:
 temp=Read1302(0x84);   
 temp=temp-1;   
 down_flag=1;
 if(temp==-1)
 temp=0x23;
 break;
 case 4:
 temp=Read1302(0x8A);   
 temp=temp-1;   
 down_flag=1;
 if(temp==0)
 temp=0x7;;
 break;
 case 5:
 temp=Read1302(0x86);   
 temp=temp-1;   
 down_flag=1;
 if(temp==0)
 temp=31;
 break;
 case 6:
 temp=Read1302(0x88);   
 temp=temp-1;   
 down_flag=1;
 if(temp==0)
 temp=12;
 break;
 case 7:
 temp=Read1302(0x8C);   
 temp=temp-1;   
 down_flag=1;
 if(temp==-1)
 temp=0x85;
 break;
 default:break;
 }
 
 while(Down==0);
 while(wireless_3==1);
 }
 }
 
 void Setkey() 
 {
 Set=1;
 if(Set==0||wireless_4==1)
 {
 mdelay(8);
 count=count+1;	  
 done=1;			  
 while(Set==0);
 while(wireless_4==1);
 }
 
 }
 
 void keydone() 
 {        unsigned char Second;
 if(flag==0)     
 { Write1302(0x8e,0x00);  
 temp=Read1302(0x80);
 Write1302(0x80,temp|0x80);
 Write1302(0x8e,0x80);  
 flag=1;
 }
 Setkey();				             
 switch(count)
 {case 1:do					         
 {
 outkey();			    
 Upkey();                 
 Downkey();               
 if(up_flag==1||down_flag==1)   
 {
 Write1302(0x8e,0x00);  
 Write1302(0x80,temp|0x80);  
 Write1302(0x8e,0x80);  
 up_flag=0;
 down_flag=0;
 }
 
 hide_sec++;           
 if(hide_sec>3)
 hide_sec=0;
 show_time();          
 }while(count==2);break;  
 case 2:do					         
 {
 hide_sec=0;
 outkey();
 Upkey();
 Downkey();
 if(temp>0x60)
 temp=0;
 if(up_flag==1||down_flag==1)
 {
 Write1302(0x8e,0x00);  
 Write1302(0x82,temp);  
 Write1302(0x8e,0x80);  
 up_flag=0;
 down_flag=0;
 }
 hide_min++;
 if(hide_min>3)
 hide_min=0;
 show_time();
 }while(count==3);break;
 case 3:do					         
 {
 hide_min=0; 
 outkey();
 Upkey();
 Downkey();
 if(up_flag==1||down_flag==1)
 {
 Write1302(0x8e,0x00);  
 Write1302(0x84,temp);  
 Write1302(0x8e,0x80);  
 up_flag=0;
 down_flag=0;
 }
 hide_hour++;
 if(hide_hour>3)
 hide_hour=0;
 show_time();
 }while(count==4);break;
 case 4:do					         
 {
 hide_hour=0; 
 outkey();
 Upkey();
 Downkey();
 if(up_flag==1||down_flag==1)
 {
 Write1302(0x8e,0x00);  
 Write1302(0x8a,temp);  
 Write1302(0x8e,0x80);  
 up_flag=0;
 down_flag=0;
 }
 hide_week++;
 if(hide_week>3)
 hide_week=0;
 show_time();
 }while(count==5);break;
 case 5:do					         
 {
 hide_week=0; 
 outkey();
 Upkey();
 Downkey();
 if(up_flag==1||down_flag==1)
 {
 Write1302(0x8e,0x00);  
 Write1302(0x86,temp);  
 Write1302(0x8e,0x80);  
 up_flag=0;
 down_flag=0;
 }
 hide_day++;
 if(hide_day>3)
 hide_day=0;
 show_time();
 }while(count==6);break;
 case 6:do					         
 {
 hide_day=0; 
 outkey();
 Upkey();
 Downkey();
 if(up_flag==1||down_flag==1)
 {
 Write1302(0x8e,0x00);  
 Write1302(0x88,temp);  
 Write1302(0x8e,0x80);  
 up_flag=0;
 down_flag=0;
 }
 hide_month++;
 if(hide_month>3)
 hide_month=0;
 show_time();
 }while(count==7);break;
 case 7:do					         
 {
 hide_month=0; 
 outkey();
 Upkey();
 Downkey();
 if(up_flag==1||down_flag==1)
 {
 Write1302(0x8e,0x00);  
 Write1302(0x8c,temp);  
 Write1302(0x8e,0x80);  
 up_flag=0;
 down_flag=0;
 }
 hide_year++;
 if(hide_year>3)
 hide_year=0;
 show_time();
 }while(count==8);break;
 case 8: count=0;hide_year=0;   
 Second=Read1302(0x80);
 Write1302(0x8e,0x00);  
 Write1302(0x80,Second&0x7f);
 Write1302(0x8E,0x80);           
 done=0;
 break;  
 default:break;
 
 }
 
 }
 
 
 void show_time()    
 {
 DS1302_GetTime(&CurrentTime);   
 TimeToStr(&CurrentTime);        
 DateToStr(&CurrentTime);        
 ReadTemp();                     
 temp_to_str();                  
 GOTOXY(1,0);
 print("ÈÕÆÚ£º ");
 GOTOXY(2,0);
 print("Ê±¼ä£º ");
 GOTOXY(3,0);
 print("ÐÇÆÚ: ");
 GOTOXY(4,0);
 print("ÎÂ¶È: ");
 GOTOXY(4,3);                   
 print(TempBuffer);              
 GOTOXY(4,4);
 print("ÉãÊÏ¶È");
 GOTOXY (2,3);
 print(CurrentTime.TimeString);  
 GOTOXY (1,3);
 print(CurrentTime.DateString);  
 GOTOXY (3,3);
 print(week_value);              
 Delay1ms(400);                  
 }
 
 
 
 main()
 {
 flag=1;            
 init_lcd();
 clrram_lcd();
 Init_DS18B20( ) ;       
 Initial_DS1302();  
 up_flag=0;
 down_flag=0;
 done=0;            
 wireless_1=0;
 wireless_2=0;
 wireless_3=0;
 wireless_4=0;
 while(1)
 {   
 while(done==1)
 keydone();     
 while(done==0)
 {  
 show_time();                 
 flag=0;                  
 Setkey();				  
 }
 }
 }
 
 
 
 
